@startuml KlassenDiagramm
'-----------------------------------
' Backend (LogIt.Core)
'-----------------------------------
package "LogIt.Core (Backend)" {
  class ProgramLogger {
    + ScanProcesses(): void
    + UpdateRunTime(): void
  }

  class LogEntry {
    + logId: int
    + programName: string
    + processId: int
    + startTime: DateTime
    + endTime: DateTime?
    + totalRunTime: TimeSpan
    + currentRunTime: TimeSpan
    + isRunning: bool
    + Start(): void
    + Stop(): void
    + GetTotalRunTime(): TimeSpan
    + GetCurrentRunTime(): TimeSpan
  }

  class User {
    + userId: int
    + role: enum { Backend, Frontend, System }
    + Authenticate(): bool
  }

  ProgramLogger --> LogEntry : creates/updates
  User --> LogEntry            : owns
}

'-----------------------------------
' REST API (LogIt.RESTApi)
'-----------------------------------
package "LogIt.RESTApi (REST API)" {
  class ProgramDto {
    + logId: int
    + programName: string
    + processId: int
    + startTime: DateTime
    + endTime: DateTime?
    + totalRunTime: TimeSpan
    + currentRunTime: TimeSpan
    + isRunning: bool
    + userId: int
  }

  class LogsController {
    + GetActive(): IEnumerable<ProgramDto>
    + GetAll(): IEnumerable<ProgramDto>
    + PostStart(dto: ProgramDto): IActionResult
    + PostStop(dto: ProgramDto): IActionResult
    + PutUpdate(dto: ProgramDto): IActionResult
  }

  class DatabaseManager {
    + SaveStart(dto: ProgramDto): void
    + SaveStop(dto: ProgramDto): void
    + Update(dto: ProgramDto): void
    + LoadActive(): IEnumerable<ProgramDto>
    + LoadAll(): IEnumerable<ProgramDto>
  }

  LogsController --> ProgramDto
  LogsController --> DatabaseManager
  DatabaseManager --> ProgramDto
}

'-----------------------------------
' Frontend (LogIt.UI)
'-----------------------------------
package "LogIt.UI (Frontend)" {
  class MainWindowViewModel {
    + Programs: ObservableCollection<ProgramViewModel>
    + RefreshCommand: ICommand
    + ShowHistoryCommand: ICommand
  }

  class ApiService {
    + GetActiveAsync(): Task<IEnumerable<ProgramDto>>
    + PostStartAsync(dto: ProgramDto): Task
    + PostStopAsync(dto: ProgramDto): Task
    + PutUpdateAsync(dto: ProgramDto): Task
  }

  class ProgramViewModel {
    + programName: string
    + currentRunTime: TimeSpan
    + totalRunTime: TimeSpan
  }

  MainWindowViewModel --> ApiService
  MainWindowViewModel --> ProgramViewModel
  ApiService --> ProgramDto
}

@enduml
