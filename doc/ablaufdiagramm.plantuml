@startuml Ablauf LogIt

|Frontend (LogIt.UI.exe)|
start
:Starte LogIt.UI.exe;
:App.OnStartup();
:Prüfe, ob Backend läuft;
if (Läuft Backend) then (nein)
  :Starte LogIt.Core.exe (Backend);
endif
:Erstelle Startmenü-Verknüpfung;
:Initialisiere MainWindowViewModel;
:Starte DispatcherTimer (jede Sekunde);

while (MainWindow offen?) is (ja)
  :Rufe RefreshAsync();
  :Fordere alle LogEntries via ApiService an (HTTP GET /api/logentries);
  :Bereite Daten für Tabelle und Diagramm auf;
  :Aktualisiere UI (Tabelle, Diagramm, Labels, Achsen);
  :Warte 1 Sekunde;
endwhile
:Beende Timer;
:App.OnExit();
if (Backend wurde von UI gestartet) then (ja)
  :Beende Backend-Prozess;
endif
stop

|Backend (LogIt.Core.exe)|
start
:Program.Main();
:Initialisiere Logging (Serilog), DB, WebAPI;
:Starte ProcessMonitorService (BackgroundService);

while (Backend läuft?) is (ja)
  :ProcessMonitorService prüft Prozesse (jede Sekunde);
  if (Neuer Prozess gefunden?) then (ja)
    :Lege neuen LogEntry und Session an;
    :Speichere in DB;
    :Logge Start;
  endif
  if (Prozess beendet?) then (ja)
    :Beende Session (EndTime setzen);
    :Speichere in DB;
    :Logge Ende;
  endif
  :Aktualisiere laufende Sessions;
  :Warte 1 Sekunde;
endwhile
stop

|REST API (im Backend)|
partition REST_API {
  :Empfange HTTP-Request (z.B. GET /api/logentries);
  :Lese/Schreibe Datenbank;
  :Gib JSON-Antwort zurück;
}

@enduml