@startuml f
|Backend|
start
:Initialisiere ProcessFetcher;
while (Backend läuft?) is (ja)
  :Scanne laufende Prozesse;
  
  if (Neuer Prozess?) then (ja)
    :LogEntry.Start();
    -> REST_API : POST /logs/start;
  endif

  if (Prozess beendet?) then (ja)
    :LogEntry.Stop();
    -> REST_API : POST /logs/stop;
  else (läuft weiter)
    :LogEntry.UpdateRunTime();
    -> REST_API : PUT /logs/update;
  endif

  :Warte 5 Sekunden;
endwhile

|REST_API|
partition REST_API {
  :Empfange HTTP-Request;
  
  if (Request = POST /logs/start) then (ja)
    :DatabaseManager.SaveStart();
    --> HTTP 200 OK;
  endif
  
  if (Request = POST /logs/stop) then (ja)
    :DatabaseManager.SaveStop();
    --> HTTP 200 OK;
  endif
  
  if (Request = PUT /logs/update) then (ja)
    :DatabaseManager.Update();
    --> HTTP 200 OK;
  endif
  
  if (Request = GET /logs/active) then (ja)
    :DatabaseManager.LoadActive();
    --> HTTP 200 OK + Daten;
  endif
}

|Frontend|
partition Frontend {
  :Initialisiere GUI (MainWindow);
  while (GUI offen?) is (ja)
    :-> REST_API : GET /logs/active;
    :Empfange Liste<LogEntry>;
    :ShowActivePrograms();
    
    if (User klickt "Historie"?) then (ja)
      :-> REST_API : GET /logs/all;
      :Empfange Liste<LogEntry>;
      :ShowHistoryWindow();
    endif
    
    :Warte UI-Timer (z.B. 5 Sekunden);
  endwhile
}
stop
@enduml
